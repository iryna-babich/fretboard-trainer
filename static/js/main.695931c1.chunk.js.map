{"version":3,"sources":["components/StartScreen/StartScreen.js","components/ResultsScreen/ResultsScreen.js","components/GameScreen/GameScreen.js","App.js","serviceWorker.js","index.js"],"names":["options","value","label","StartScreen","state","questionNumber","handleNumberOfQuestions","questionOption","updatedQuestionsNumber","_this","setState","onStartGameClick","this","props","console","log","react_default","a","createElement","className","htmlFor","react_select_esm","id","onChange","placeholder","onClick","Component","ResultScreen","totalWrongGuessesCount","onGameRestarted","questionsCount","duration","durationMinutes","Math","floor","durationSeconds","toFixed","averageDurationSeconds","timeInMinutes","defaultProps","notes","octaveIndexArr","octave","GameScreen","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","randomStringIndex","randomNoteIndex","wrongGuesses","rightGuess","rightGuessesArr","startTime","assignNoteToGuess","getRandomStringIndex","getRandomNoteIndex","playPositionAtStringAndFret","setStartTime","Date","now","i","j","note","playNote","concat","correctlyGuessedNote","_this$props","onGameCompleted","updatedrightGuessesArr","toConsumableArray","length","wronglyGuessedNote","handleNoteClick","synth","random","Tone","Synth","toMaster","triggerAttackRelease","_this2","allStrings","answerString","verticalStrArr","markerDotsArr","_this$state","_loop","stringToRender","stringButtonClasses","_loop3","push","key","_loop2","buttonClasses","isWrongGuesses","includes","isRightGuess","App","screen","handleStartGameClick","num","handleGameCompleted","rightGuessesArrParam","totalWrongGuessesCountParam","startGameHandler","restartClickHandler","components_StartScreen_StartScreen","components_GameScreen_GameScreen","ResultsScreen_ResultsScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.695931c1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Select from \"react-select\";\n\nimport \"./StartScreen.scss\";\n\nconst options = [\n  { value: 5, label: 5 },\n  { value: 10, label: 10 },\n  { value: 15, label: 15 }\n];\n\nclass StartScreen extends Component {\n  state = {\n    questionNumber: 10\n  };\n\n  handleNumberOfQuestions = questionOption => {\n    const updatedQuestionsNumber = questionOption.value;\n    this.setState({\n      questionNumber: updatedQuestionsNumber\n    });\n  };\n\n  render() {\n    const { onStartGameClick } = this.props;\n    const { questionNumber } = this.state;\n    console.log(\"questionsNumber:\", this.state.questionNumber);\n    console.log(typeof this.state.questionNumber);\n\n    return (\n      <div className=\"startscreen-wrapper\">\n        <h1 className=\"header-main\">Fretboard Trainer</h1>\n\n        <div className=\"strings-overlay\">\n          <div className=\"question-options\">\n            <label htmlFor=\"questions-dropdown\">\n              Select number of questions:\n            </label>\n            <Select\n              id=\"questions-dropdown\"\n              onChange={this.handleNumberOfQuestions}\n              options={options}\n              value={questionNumber}\n              placeholder={questionNumber}\n            />\n          </div>\n          <button\n            className=\"start-button\"\n            onClick={() => onStartGameClick(questionNumber)}\n          >\n            Start\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StartScreen;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./ResultsScreen.scss\";\n\nconst ResultScreen = props => {\n  const {\n    totalWrongGuessesCount,\n    onGameRestarted,\n    questionsCount,\n    duration\n  } = props;\n\n  const durationMinutes = Math.floor(duration / 60);\n  const durationSeconds = (duration % 60).toFixed(1);\n  const averageDuration = duration / questionsCount;\n  const averageDurationSeconds = (averageDuration % 60).toFixed(2);\n\n  let timeInMinutes = \"minutes\";\n  if (durationMinutes === 1) {\n    timeInMinutes = \"minute\";\n  }\n\n  return (\n    <div className=\"results-wrapper\">\n      <h2>Your results:</h2>\n      <p>Number of questions: {questionsCount}</p>\n      <p>\n        Number of mistakes:{\" \"}\n        <span className=\"is-wrong-count\">\n          <strong>{totalWrongGuessesCount}</strong>\n        </span>\n      </p>\n      <p>\n        Total time:{\" \"}\n        <strong>\n          {durationMinutes > 0 && (\n            <span className=\"duration-minutes\">\n              {durationMinutes} {timeInMinutes}{\" \"}\n            </span>\n          )}\n          {durationSeconds} seconds\n        </strong>\n      </p>\n\n      <p>\n        Average time per note: <strong>{averageDurationSeconds} seconds</strong>\n      </p>\n      <button className=\"restart-button\" onClick={onGameRestarted}>\n        Restart\n      </button>\n    </div>\n  );\n};\n\nResultScreen.propTypes = {\n  totalWrongGuessesCount: PropTypes.number,\n  onGameRestarted: PropTypes.func,\n  questionsCount: PropTypes.number,\n  duration: PropTypes.number\n};\n\nResultScreen.defaultProps = {\n  onGameRestarted: () => {},\n  totalWrongGuessesCount: 0,\n  questionsCount: 0,\n  duration: 0\n};\n\nexport default ResultScreen;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Tone from \"tone\";\n\nimport \"./GameScreen.scss\";\n\nconst notes = [\n  [\"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\"],\n  [\"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"],\n  [\"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\"],\n  [\"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\"],\n  [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\"],\n  [\"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\"]\n];\n\nconst octaveIndexArr = [\n  [4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5],\n  [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n  [3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n  [3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4],\n  [2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n  [2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]\n];\n\nconst octave = [\n  \"C\",\n  \"C#\",\n  \"D\",\n  \"D#\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"G\",\n  \"G#\",\n  \"A\",\n  \"A#\",\n  \"B\"\n];\n\nconst verticalStr = 12;\n\nclass GameScreen extends Component {\n  static getRandomStringIndex() {\n    return Math.floor(Math.random() * notes.length);\n  }\n\n  static getRandomNoteIndex() {\n    return Math.floor(Math.random() * notes[0].length);\n  }\n\n  constructor(props) {\n    super(props);\n    this.synth = null;\n  }\n\n  state = {\n    randomStringIndex: null,\n    randomNoteIndex: null,\n    wrongGuesses: [],\n    totalWrongGuessesCount: 0,\n    rightGuess: \"\",\n    rightGuessesArr: [],\n    startTime: null\n  };\n\n  assignNoteToGuess = () => {\n    const randomStringIndex = GameScreen.getRandomStringIndex();\n    const randomNoteIndex = GameScreen.getRandomNoteIndex();\n\n    this.playPositionAtStringAndFret(randomStringIndex, randomNoteIndex);\n    this.setState({\n      randomStringIndex: randomStringIndex,\n      randomNoteIndex: randomNoteIndex\n    });\n  };\n\n  setStartTime = () => {\n    this.setState({\n      startTime: Date.now()\n    });\n  };\n\n  componentDidMount() {\n    this.synth = new Tone.Synth().toMaster();\n    this.assignNoteToGuess();\n    this.setStartTime();\n  }\n\n  playNote(note) {\n    this.synth.triggerAttackRelease(note, \"16n\");\n  }\n\n  playPositionAtStringAndFret = (i, j) => {\n    const note = notes[i][j];\n    const octave = octaveIndexArr[i][j];\n    console.log(\"octave:\", octave);\n    this.playNote(`${note}${octave}`);\n  };\n\n  correctlyGuessedNote = i => {\n    const { onGameCompleted, questionsCount } = this.props;\n\n    const startTime = this.state.startTime;\n    // Duration in seconds.\n    const duration = (Date.now() - startTime) / 1000;\n\n    this.setState(state => {\n      const updatedrightGuessesArr = [...state.rightGuessesArr, octave[i]];\n      const resetWrongGuesses = [];\n      const rightGuessesCount = updatedrightGuessesArr.length;\n\n      // Hightlight next random note after we guessed the correct note if rightGuessArr is less than questionsCount.\n      if (rightGuessesCount < questionsCount) {\n        const randomStringIndex = GameScreen.getRandomStringIndex();\n        const randomNoteIndex = GameScreen.getRandomNoteIndex();\n\n        this.playPositionAtStringAndFret(randomStringIndex, randomNoteIndex);\n\n        return {\n          wrongGuesses: resetWrongGuesses,\n          rightGuessesArr: updatedrightGuessesArr,\n          randomStringIndex: randomStringIndex,\n          randomNoteIndex: randomNoteIndex\n        };\n      } else {\n        // Notify App.\n        onGameCompleted(\n          updatedrightGuessesArr,\n          state.totalWrongGuessesCount,\n          duration\n        );\n\n        return {\n          rightGuessesArr: updatedrightGuessesArr\n        };\n      }\n    });\n  };\n\n  wronglyGuessedNote = i => {\n    this.setState(state => {\n      const updatedWrongGuesses = [...state.wrongGuesses, octave[i]];\n      const updatedtotalWrongGuessesCount = state.totalWrongGuessesCount + 1;\n      return {\n        wrongGuesses: updatedWrongGuesses,\n        totalWrongGuessesCount: updatedtotalWrongGuessesCount\n      };\n    });\n  };\n\n  handleNoteClick = i => {\n    const isCorrectNote =\n      octave[i] ===\n      notes[this.state.randomStringIndex][this.state.randomNoteIndex];\n\n    if (isCorrectNote) {\n      this.correctlyGuessedNote(i);\n\n      // If it's a correct guess, updating state, adding correct answer to the rightGuessesArr.\n    } else {\n      this.wronglyGuessedNote(i);\n    }\n  };\n\n  render() {\n    const allStrings = [];\n    const answerString = [];\n    const verticalStrArr = [];\n    const markerDotsArr = [];\n    const {\n      randomStringIndex,\n      randomNoteIndex,\n      wrongGuesses,\n      totalWrongGuessesCount,\n      rightGuess,\n      rightGuessesArr\n    } = this.state;\n\n    const { questionsCount } = this.props;\n\n    // Render guitar strings.\n    for (let i = 0; i < notes.length; i++) {\n      const stringToRender = [];\n      let stringButtonClasses = \"\";\n      for (let j = 0; j < notes[i].length; j++) {\n        // Highlight randomly picked note.\n        if (i === randomStringIndex && j === randomNoteIndex) {\n          stringButtonClasses = \"string-item is-highlighted\";\n          console.log(\"highlighted:\", notes[i][j]);\n          stringToRender.push(\n            <li className={stringButtonClasses} key={`${i}-${j}`}>\n              <button onClick={() => this.playPositionAtStringAndFret(i, j)}>\n                {notes[i][j]}\n              </button>\n            </li>\n          );\n        } else {\n          stringButtonClasses = \"string-item\";\n          stringToRender.push(\n            <li className={stringButtonClasses} key={`${i}-${j}`}>\n              <button>{notes[i][j]}</button>\n            </li>\n          );\n        }\n      }\n\n      allStrings.push(\n        <ul className=\"string\" key={i}>\n          {stringToRender}\n        </ul>\n      );\n    }\n\n    // Render answer string.\n    for (let i = 0; i < octave.length; i++) {\n      let buttonClasses = \"\";\n      const isWrongGuesses = wrongGuesses.includes(octave[i]);\n      const isRightGuess = rightGuess === octave[i];\n\n      if (isWrongGuesses) {\n        buttonClasses = \"is-wrong\";\n      } else if (isRightGuess) {\n        buttonClasses = \"is-correct\";\n      }\n\n      answerString.push(\n        <li key={i}>\n          <button\n            onClick={() => this.handleNoteClick(i)}\n            className={buttonClasses}\n          >\n            {octave[i]}\n          </button>\n        </li>\n      );\n    }\n\n    // Render vertical stripes.\n    for (let i = 0; i < verticalStr; i++) {\n      verticalStrArr.push(<div className=\"vertical-stripe\" key={i} />);\n    }\n\n    // Render marker dots.\n    for (let i = 0; i < verticalStr; i++) {\n      markerDotsArr.push(<div className=\"marker-dot\" key={i} />);\n    }\n\n    console.log(\"total wrong guesses count:\", totalWrongGuessesCount);\n    console.log(\"latest rightGuesses:\", this.state.rightGuessesArr);\n\n    return (\n      <div className=\"fretboard-inner\">\n        <div className=\"strings-wrapper\">\n          <div className=\"strings-wrapper--inner\">\n            <div className=\"vertical-stripes\">{verticalStrArr}</div>\n            <div className=\"marker-dots\">{markerDotsArr}</div>\n            <div className=\"strings\">{allStrings}</div>\n          </div>\n        </div>\n        <div className=\"defined-notes-wrapper\">\n          <ul className=\"defined-notes\">{answerString}</ul>\n        </div>\n        <p>\n          Question {rightGuessesArr.length + 1} of {questionsCount}\n        </p>\n      </div>\n    );\n  }\n}\n\nGameScreen.propTypes = {\n  questionsCount: PropTypes.number.isRequired\n};\n\nexport default GameScreen;\n","import React, { Component } from \"react\";\nimport StartScreen from \"./components/StartScreen/StartScreen\";\nimport ResultsScreen from \"./components/ResultsScreen/ResultsScreen\";\nimport GameScreen from \"./components/GameScreen/GameScreen\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  state = {\n    screen: 1,\n    totalWrongGuessesCount: null,\n    rightGuessesArr: [],\n    questionsCount: null,\n    duration: null\n  };\n\n  handleStartGameClick = num => {\n    this.setState({\n      screen: 2,\n      questionsCount: num\n    });\n  };\n\n  handleGameCompleted = (\n    rightGuessesArrParam,\n    totalWrongGuessesCountParam,\n    duration\n  ) => {\n    this.setState({\n      screen: 3,\n      rightGuessesArr: rightGuessesArrParam,\n      totalWrongGuessesCount: totalWrongGuessesCountParam,\n      duration: duration\n    });\n  };\n\n  startGameHandler = () => {\n    this.setState({\n      screen: 2\n    });\n    this.assignNoteToGuess();\n  };\n\n  restartClickHandler = () => {\n    this.setState({\n      screen: 2\n    });\n  };\n\n  render() {\n    const {\n      screen,\n      totalWrongGuessesCount,\n      questionsCount,\n      duration\n    } = this.state;\n\n    // Render screen.\n    if (screen === 1) {\n      return (\n        <div className=\"App\">\n          <StartScreen\n            onStartGameClick={this.handleStartGameClick}\n            questionsCount={questionsCount}\n          />\n        </div>\n      );\n    }\n    if (screen === 2) {\n      return (\n        <div className=\"App\">\n          <GameScreen\n            questionsCount={questionsCount}\n            onGameCompleted={this.handleGameCompleted}\n          />\n        </div>\n      );\n    }\n    if (screen === 3) {\n      return (\n        <div className=\"App\">\n          <ResultsScreen\n            questionsCount={questionsCount}\n            onGameRestarted={this.restartClickHandler}\n            totalWrongGuessesCount={totalWrongGuessesCount}\n            duration={duration}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}