{"version":3,"sources":["components/StartScreen/StartScreen.js","components/ResultsScreen/ResultsScreen.js","components/GameScreen/GameScreen.js","App.js","serviceWorker.js","index.js"],"names":["StartScreen","state","questionsNumber","handleNumberOfQuestions","e","_this","setState","target","value","onStartGameClick","this","props","console","log","react_default","a","createElement","className","for","id","onChange","onClick","Component","ResultScreen","rightGuessesArr","totalWrongGuessesCount","onGameRestarted","rightAnswers","join","notes","octave","GameScreen","randomStringIndex","randomNoteIndex","wrongGuesses","rightGuess","assignNoteToGuess","getRandomStringIndex","getRandomNoteIndex","playTheNote","note","Tone","Synth","toMaster","triggerAttackRelease","concat","handleNoteClick","i","isCorrectNote","_this$props","onGameCompleted","questionsCount","updatedrightGuessesArr","Object","toConsumableArray","length","_this2","allStrings","answerString","_this$state","stringToRender","stringButtonClasses","j","push","key","_loop","buttonClasses","isWrongGuesses","includes","isRightGuess","Math","floor","random","App","screen","handleStartGameClick","num","handleGameCompleted","rightGuessesArrParam","totalWrongGuessesCountParam","startGameHandler","restartClickHandler","components_StartScreen_StartScreen","components_GameScreen_GameScreen","ResultsScreen_ResultsScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6edcb90f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./StartScreen.scss\";\n\nclass StartScreen extends Component {\n  state = {\n    questionsNumber: 10\n  };\n\n  handleNumberOfQuestions = e => {\n    this.setState({\n      questionsNumber: e.target.value\n    });\n  };\n\n  render() {\n    const { onStartGameClick } = this.props;\n    const { questionsNumber } = this.state;\n    console.log(\"questionsNumber:\", this.state.questionsNumber);\n\n    return (\n      <div className=\"startscreen-wrapper\">\n        <h1 className=\"header-main\">Fretboard Trainer App</h1>\n\n        <div className=\"strings-overlay\">\n          <div className=\"question-options\">\n            <label for=\"questions-dropdown\">Select number of questions:</label>\n            <select\n              id=\"questions-dropdown\"\n              onChange={this.handleNumberOfQuestions}\n              value={questionsNumber}\n            >\n              <option value={5}>5</option>\n              <option value={10}>10</option>\n              <option value={15}>15</option>\n            </select>\n          </div>\n          <button\n            className=\"start-button\"\n            onClick={() => onStartGameClick(questionsNumber)}\n          >\n            Start\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StartScreen;\n","import React from \"react\";\n\nimport \"./ResultsScreen.scss\";\n\nconst ResultScreen = props => {\n  const { rightGuessesArr, totalWrongGuessesCount, onGameRestarted } = props;\n  const rightAnswers = rightGuessesArr.join(\", \");\n  return (\n    <div className=\"results-wrapper\">\n      <h2>Your results:</h2>\n      <p>\n        Correctly guessed notes are:{\" \"}\n        <span className=\"is-correct-arr\">\n          <strong>{rightAnswers}</strong>\n        </span>\n      </p>\n      <p>\n        Incorrectly guessed notes:{\" \"}\n        <span className=\"is-wrong-count\">\n          <strong>{totalWrongGuessesCount}</strong>\n        </span>\n      </p>\n      <button onClick={onGameRestarted}>Restart</button>\n    </div>\n  );\n};\n\nexport default ResultScreen;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Tone from \"tone\";\n\nimport \"./GameScreen.scss\";\n\nconst notes = [\n  [\"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\"],\n  [\"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"],\n  [\"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\"],\n  [\"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\"],\n  [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\"],\n  [\"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\"]\n];\n\nconst octave = [\n  \"C\",\n  \"C#\",\n  \"D\",\n  \"D#\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"G\",\n  \"G#\",\n  \"A\",\n  \"A#\",\n  \"B\"\n];\n\nclass GameScreen extends Component {\n  static getRandomStringIndex() {\n    return Math.floor(Math.random() * notes.length);\n  }\n\n  static getRandomNoteIndex() {\n    return Math.floor(Math.random() * notes[0].length);\n  }\n\n  state = {\n    randomStringIndex: null,\n    randomNoteIndex: null,\n    wrongGuesses: [],\n    totalWrongGuessesCount: 0,\n    rightGuess: \"\",\n    rightGuessesArr: []\n  };\n\n  assignNoteToGuess = () => {\n    const randomStringIndex = GameScreen.getRandomStringIndex();\n    const randomNoteIndex = GameScreen.getRandomNoteIndex();\n\n    this.playTheNote(notes[randomStringIndex][randomNoteIndex]);\n    this.setState({\n      randomStringIndex: randomStringIndex,\n      randomNoteIndex: randomNoteIndex\n    });\n  };\n\n  componentDidMount() {\n    this.assignNoteToGuess();\n  }\n\n  playTheNote = note => {\n    var synth = new Tone.Synth().toMaster();\n\n    // Play the note for the duration of an 8th note.\n    synth.triggerAttackRelease(`${note}4`, \"8n\");\n  };\n\n  handleNoteClick = i => {\n    const isCorrectNote =\n      octave[i] ===\n      notes[this.state.randomStringIndex][this.state.randomNoteIndex];\n\n    const { onGameCompleted, questionsCount } = this.props;\n\n    this.playTheNote(octave[i]);\n    if (isCorrectNote) {\n      // If it's a correct guess, updating state, adding correct answer to the rightGuessesArr.\n      this.setState(state => {\n        const updatedrightGuessesArr = [...state.rightGuessesArr, octave[i]];\n        const resetWrongGuesses = [];\n        const rightGuessesCount = updatedrightGuessesArr.length;\n\n        // Hightlight next random note after we guessed the correct note if rightGuessArr is less than questionsCount.\n        if (rightGuessesCount < questionsCount) {\n          const randomStringIndex = GameScreen.getRandomStringIndex();\n          const randomNoteIndex = GameScreen.getRandomNoteIndex();\n\n          this.playTheNote(notes[randomStringIndex][randomNoteIndex]);\n\n          return {\n            wrongGuesses: resetWrongGuesses,\n            rightGuessesArr: updatedrightGuessesArr,\n            randomStringIndex: randomStringIndex,\n            randomNoteIndex: randomNoteIndex\n          };\n        } else {\n          // Notify App.\n          onGameCompleted(updatedrightGuessesArr, state.totalWrongGuessesCount);\n          return {\n            rightGuessesArr: updatedrightGuessesArr\n          };\n        }\n      });\n    } else {\n      this.setState(state => {\n        const updatedWrongGuesses = [...state.wrongGuesses, octave[i]];\n        const updatedtotalWrongGuessesCount = state.totalWrongGuessesCount + 1;\n        return {\n          wrongGuesses: updatedWrongGuesses,\n          totalWrongGuessesCount: updatedtotalWrongGuessesCount\n        };\n      });\n    }\n  };\n\n  render() {\n    const allStrings = [];\n    const answerString = [];\n    const {\n      randomStringIndex,\n      randomNoteIndex,\n      wrongGuesses,\n      totalWrongGuessesCount,\n      rightGuess,\n      rightGuessesArr\n    } = this.state;\n\n    const { questionsCount } = this.props;\n\n    // Render guitar strings.\n    for (let i = 0; i < notes.length; i++) {\n      const stringToRender = [];\n      let stringButtonClasses = \"\";\n      for (let j = 0; j < notes[i].length; j++) {\n        // Highlight randomly picked note.\n        if (i === randomStringIndex && j === randomNoteIndex) {\n          // this.playTheNote(notes[i][j]);\n          stringButtonClasses = \"string-item is-highlighted\";\n          console.log(\"highlighted:\", notes[i][j]);\n        } else {\n          stringButtonClasses = \"string-item\";\n        }\n        stringToRender.push(\n          <li className={stringButtonClasses} key={`${i}-${j}`}>\n            <button>{notes[i][j]}</button>\n          </li>\n        );\n      }\n\n      allStrings.push(\n        <ul className=\"string\" key={i}>\n          {stringToRender}\n        </ul>\n      );\n    }\n\n    for (let i = 0; i < octave.length; i++) {\n      let buttonClasses = \"\";\n      const isWrongGuesses = wrongGuesses.includes(octave[i]);\n      const isRightGuess = rightGuess === octave[i];\n\n      if (isWrongGuesses) {\n        buttonClasses = \"is-wrong\";\n      } else if (isRightGuess) {\n        buttonClasses = \"is-correct\";\n      }\n\n      answerString.push(\n        <li key={i}>\n          <button\n            onClick={() => this.handleNoteClick(i)}\n            className={buttonClasses}\n          >\n            {octave[i]}\n          </button>\n        </li>\n      );\n    }\n\n    console.log(\"latest wrongGuesses:\", this.state.wrongGuesses);\n    console.log(\"total wrong guesses count:\", totalWrongGuessesCount);\n    console.log(\n      \"latest rightGuesses:\",\n      this.state.rightGuessesArr,\n      this.state.rightGuessesArr.length\n    );\n\n    return (\n      <div className=\"fretboard-inner\">\n        <div className=\"strings-wrapper\">\n          <div className=\"strings-wrapper--inner\">{allStrings}</div>\n        </div>\n        <div className=\"defined-notes-wrapper\">\n          <ul className=\"defined-notes\">{answerString}</ul>\n        </div>\n        <p>\n          Question #{rightGuessesArr.length + 1} of {questionsCount}\n        </p>\n      </div>\n    );\n  }\n}\n\nGameScreen.propTypes = {\n  questionsCount: PropTypes.number.isRequired\n};\n\nexport default GameScreen;\n","import React, { Component } from \"react\";\nimport StartScreen from \"./components/StartScreen/StartScreen\";\nimport ResultsScreen from \"./components/ResultsScreen/ResultsScreen\";\nimport GameScreen from \"./components/GameScreen/GameScreen\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  state = {\n    screen: 1,\n    totalWrongGuessesCount: null,\n    rightGuessesArr: [],\n    questionsCount: null\n  };\n\n  handleStartGameClick = num => {\n    this.setState({\n      screen: 2,\n      questionsCount: num\n    });\n  };\n\n  handleGameCompleted = (rightGuessesArrParam, totalWrongGuessesCountParam) => {\n    this.setState({\n      screen: 3,\n      rightGuessesArr: rightGuessesArrParam,\n      totalWrongGuessesCount: totalWrongGuessesCountParam\n    });\n  };\n\n  startGameHandler = () => {\n    this.setState({\n      screen: 2\n    });\n    this.assignNoteToGuess();\n  };\n\n  restartClickHandler = () => {\n    this.setState({\n      screen: 2\n    });\n  };\n\n  render() {\n    const {\n      screen,\n      totalWrongGuessesCount,\n      rightGuessesArr,\n      questionsCount\n    } = this.state;\n\n    // Render screen.\n    if (screen === 1) {\n      return (\n        <div className=\"App\">\n          <StartScreen onStartGameClick={this.handleStartGameClick} />\n        </div>\n      );\n    }\n    if (screen === 2) {\n      return (\n        <div className=\"App\">\n          <GameScreen\n            questionsCount={questionsCount}\n            onGameCompleted={this.handleGameCompleted}\n          />\n        </div>\n      );\n    }\n    if (screen === 3) {\n      return (\n        <div className=\"App\">\n          <ResultsScreen\n            onGameRestarted={this.restartClickHandler}\n            totalWrongGuessesCount={totalWrongGuessesCount}\n            rightGuessesArr={rightGuessesArr}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}