{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["notes","octave","setRightAnswersCount","App","state","screen","randomStringIndex","randomNoteIndex","wrongGuesses","totalWrongGuessesCount","rightGuess","rightGuessesArr","startGameHandler","_this","setState","getRandomStringIndex","getRandomNoteIndex","restartClickHandler","handleNoteClick","i","updatedrightGuessesArr","concat","Object","toConsumableArray","length","_this2","this","allStrings","answerString","_this$state","stringsOverlay","react_default","a","createElement","className","onClick","stringToRender","stringButtonClasses","j","console","log","push","key","_loop","buttonClasses","isWrongGuesses","includes","isRightGuess","rightGuessedNotes","join","Math","floor","random","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef9832cf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst notes = [\n  [\"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\"],\n  [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"],\n  [\"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\"],\n  [\"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\"],\n  [\"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\"],\n  [\"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\"]\n];\n\nconst octave = [\n  \"C\",\n  \"C#\",\n  \"D\",\n  \"D#\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"G\",\n  \"G#\",\n  \"A\",\n  \"A#\",\n  \"B\"\n];\n\nconst setRightAnswersCount = 5;\n\nclass App extends Component {\n  static getRandomStringIndex() {\n    return Math.floor(Math.random() * notes.length);\n  }\n\n  static getRandomNoteIndex() {\n    return Math.floor(Math.random() * notes[0].length);\n  }\n\n  state = {\n    screen: 1,\n    randomStringIndex: null,\n    randomNoteIndex: null,\n    wrongGuesses: [],\n    totalWrongGuessesCount: 0,\n    rightGuess: \"\",\n    rightGuessesArr: []\n  };\n\n  startGameHandler = () => {\n    this.setState({\n      screen: 2,\n      randomStringIndex: App.getRandomStringIndex(),\n      randomNoteIndex: App.getRandomNoteIndex()\n    });\n  };\n\n  restartClickHandler = () => {\n    this.setState({\n      screen: 2,\n      randomStringIndex: App.getRandomStringIndex(),\n      randomNoteIndex: App.getRandomNoteIndex(),\n      wrongGuesses: [],\n      rightGuess: \"\",\n      rightGuessesArr: []\n    });\n  };\n\n  handleNoteClick = i => {\n    const isCorrectNote =\n      octave[i] ===\n      notes[this.state.randomStringIndex][this.state.randomNoteIndex];\n    // let wrongGuessesCount = this.state.wrongGuesses.length;\n    if (isCorrectNote) {\n      // this.setState({ rightGuess: octave[i] });\n      // If it's a correct guess, updating state, adding correct answer to the rightGuessesArr.\n      this.setState(state => {\n        const updatedrightGuessesArr = [...state.rightGuessesArr, octave[i]];\n        const resetWrongGuesses = [];\n        const rightGuessesCount = updatedrightGuessesArr.length;\n\n        // Hightlight next random note after we guessed the correct note if rightGuessArr is less than setRightAnswersCount.\n        if (rightGuessesCount < setRightAnswersCount) {\n          return {\n            wrongGuesses: resetWrongGuesses,\n            rightGuessesArr: updatedrightGuessesArr,\n            randomStringIndex: App.getRandomStringIndex(),\n            randomNoteIndex: App.getRandomNoteIndex()\n          };\n        } else {\n          return {\n            screen: 3,\n            rightGuessesArr: updatedrightGuessesArr\n          };\n        }\n      });\n    } else {\n      this.setState(state => {\n        const updatedWrongGuesses = [...state.wrongGuesses, octave[i]];\n        const updatedtotalWrongGuessesCount = state.totalWrongGuessesCount + 1;\n        return {\n          wrongGuesses: updatedWrongGuesses,\n          totalWrongGuessesCount: updatedtotalWrongGuessesCount\n        };\n        // wrongGuessesCount = updatedWrongGuesses.length;\n\n        // if (wrongGuessesCount > 4) {\n        //   return { wrongGuesses: updatedWrongGuesses, screen: 3 };\n        // } else {\n        //   return { wrongGuesses: updatedWrongGuesses };\n        // }\n      });\n    }\n  };\n\n  render() {\n    const allStrings = [];\n    const answerString = [];\n    const {\n      screen,\n      randomStringIndex,\n      randomNoteIndex,\n      wrongGuesses,\n      totalWrongGuessesCount,\n      rightGuess,\n      rightGuessesArr\n    } = this.state;\n\n    const stringsOverlay = (\n      <div className=\"strings-overlay\">\n        <button className=\"start-button\" onClick={this.startGameHandler}>\n          Start!\n        </button>\n      </div>\n    );\n\n    // Render guitar strings.\n    for (let i = 0; i < notes.length; i++) {\n      const stringToRender = [];\n      let stringButtonClasses = \"\";\n      for (let j = 0; j < notes[i].length; j++) {\n        // Highlight randomly picked note.\n        if (i === randomStringIndex && j === randomNoteIndex) {\n          stringButtonClasses = \"string-item is-highlighted\";\n          console.log(\"highlighted:\", notes[i][j]);\n        } else {\n          stringButtonClasses = \"string-item\";\n        }\n        stringToRender.push(\n          <li className={stringButtonClasses} key={`${i}-${j}`}>\n            <button>{notes[i][j]}</button>\n          </li>\n        );\n      }\n\n      allStrings.push(\n        <ul className=\"string\" key={i}>\n          {stringToRender}\n        </ul>\n      );\n    }\n\n    for (let i = 0; i < octave.length; i++) {\n      let buttonClasses = \"\";\n      const isWrongGuesses = wrongGuesses.includes(octave[i]);\n      const isRightGuess = rightGuess === octave[i];\n\n      if (isWrongGuesses) {\n        buttonClasses = \"is-wrong\";\n      } else if (isRightGuess) {\n        buttonClasses = \"is-correct\";\n      }\n\n      answerString.push(\n        <li key={i}>\n          <button\n            onClick={() => this.handleNoteClick(i)}\n            className={buttonClasses}\n          >\n            {octave[i]}\n          </button>\n        </li>\n      );\n    }\n\n    let rightGuessedNotes = rightGuessesArr.join(\", \");\n\n    console.log(\"latest wrongGuesses:\", this.state.wrongGuesses);\n    console.log(\"total wrong guesses count:\", totalWrongGuessesCount);\n    console.log(\n      \"latest rightGuesses:\",\n      this.state.rightGuessesArr,\n      this.state.rightGuessesArr.length\n    );\n    console.log(\"screen:\", this.state.screen);\n\n    // Render screen.\n    if (screen === 1) {\n      return <div className=\"App\">{stringsOverlay}</div>;\n    }\n    if (screen === 2) {\n      return (\n        <div className=\"App\">\n          <div className=\"strings-wrapper\">{allStrings}</div>\n          <ul className=\"defined-notes\">{answerString}</ul>\n          <p>Question #{this.state.rightGuessesArr.length + 1}</p>\n        </div>\n      );\n    }\n    if (screen === 3) {\n      return (\n        <div className=\"App\">\n          <h2>Your results:</h2>\n          <p>\n            Correctly guessed notes are:{\" \"}\n            <span className=\"is-correct-arr\">\n              <strong> {rightGuessedNotes}</strong>\n            </span>\n          </p>\n          <p>\n            Amount of incorrectly guessed notes:\n            <span className=\"is-wrong-count\">\n              <strong> {totalWrongGuessesCount}</strong>\n            </span>\n          </p>\n          <button onClick={this.restartClickHandler}>Restart</button>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}