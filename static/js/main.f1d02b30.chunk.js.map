{"version":3,"sources":["components/StartScreen.js","components/ResultsScreen.js","components/GameScreen.js","App.js","serviceWorker.js","index.js"],"names":["StartScreen","props","onStartGameClick","react_default","a","createElement","className","onClick","ResultScreen","rightGuessesArr","totalWrongGuessesCount","onGameRestarted","rightAnswers","join","notes","octave","GameScreen","state","randomStringIndex","randomNoteIndex","wrongGuesses","rightGuess","assignNoteToGuess","getRandomStringIndex","getRandomNoteIndex","_this","playTheNote","setState","note","Tone","Synth","toMaster","triggerAttackRelease","concat","handleNoteClick","i","isCorrectNote","_this$props","onGameCompleted","questionsCount","updatedrightGuessesArr","Object","toConsumableArray","length","this","_this2","allStrings","answerString","_this$state","stringToRender","stringButtonClasses","j","console","log","push","key","_loop","buttonClasses","isWrongGuesses","includes","isRightGuess","Math","floor","random","Component","App","screen","handleStartGameClick","handleGameCompleted","rightGuessesArrParam","totalWrongGuessesCountParam","startGameHandler","restartClickHandler","components_StartScreen","components_GameScreen","ResultsScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1d02b30.chunk.js","sourcesContent":["import React from \"react\";\n\nconst StartScreen = props => {\n  const { onStartGameClick } = props;\n  return (\n    <div className=\"strings-overlay\">\n      <button className=\"start-button\" onClick={onStartGameClick}>\n        Start!\n      </button>\n    </div>\n  );\n};\n\nexport default StartScreen;\n","import React from \"react\";\n\nconst ResultScreen = props => {\n  const { rightGuessesArr, totalWrongGuessesCount, onGameRestarted } = props;\n  const rightAnswers = rightGuessesArr.join(\", \");\n  return (\n    <div className=\"results-wrapper\">\n      <h2>Your results:</h2>\n      <p>\n        Correctly guessed notes are:{\" \"}\n        <span className=\"is-correct-arr\">\n          <strong>{rightAnswers}</strong>\n        </span>\n      </p>\n      <p>\n        Incorrectly guessed notes:\n        <span className=\"is-wrong-count\">\n          <strong>{totalWrongGuessesCount}</strong>\n        </span>\n      </p>\n      <button onClick={onGameRestarted}>Restart</button>\n    </div>\n  );\n};\n\nexport default ResultScreen;\n","import React, { Component } from \"react\";\nimport Tone from \"tone\";\n\nconst notes = [\n  [\"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\"],\n  [\"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\"],\n  [\"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\"],\n  [\"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\"],\n  [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"],\n  [\"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\"]\n];\n\nconst octave = [\n  \"C\",\n  \"C#\",\n  \"D\",\n  \"D#\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"G\",\n  \"G#\",\n  \"A\",\n  \"A#\",\n  \"B\"\n];\n\nclass GameScreen extends Component {\n  static getRandomStringIndex() {\n    return Math.floor(Math.random() * notes.length);\n  }\n\n  static getRandomNoteIndex() {\n    return Math.floor(Math.random() * notes[0].length);\n  }\n\n  state = {\n    randomStringIndex: null,\n    randomNoteIndex: null,\n    wrongGuesses: [],\n    totalWrongGuessesCount: 0,\n    rightGuess: \"\",\n    rightGuessesArr: []\n  };\n\n  assignNoteToGuess = () => {\n    const randomStringIndex = GameScreen.getRandomStringIndex();\n    const randomNoteIndex = GameScreen.getRandomNoteIndex();\n\n    this.playTheNote(notes[randomStringIndex][randomNoteIndex]);\n    this.setState({\n      randomStringIndex: randomStringIndex,\n      randomNoteIndex: randomNoteIndex\n    });\n  };\n\n  componentDidMount() {\n    this.assignNoteToGuess();\n  }\n\n  playTheNote = note => {\n    var synth = new Tone.Synth().toMaster();\n\n    // Play the note for the duration of an 8th note.\n    synth.triggerAttackRelease(`${note}4`, \"8n\");\n  };\n\n  handleNoteClick = i => {\n    const isCorrectNote =\n      octave[i] ===\n      notes[this.state.randomStringIndex][this.state.randomNoteIndex];\n\n    const { onGameCompleted, questionsCount } = this.props;\n\n    this.playTheNote(octave[i]);\n    if (isCorrectNote) {\n      // If it's a correct guess, updating state, adding correct answer to the rightGuessesArr.\n      this.setState(state => {\n        const updatedrightGuessesArr = [...state.rightGuessesArr, octave[i]];\n        const resetWrongGuesses = [];\n        const rightGuessesCount = updatedrightGuessesArr.length;\n\n        // Hightlight next random note after we guessed the correct note if rightGuessArr is less than questionsCount.\n        if (rightGuessesCount < questionsCount) {\n          const randomStringIndex = GameScreen.getRandomStringIndex();\n          const randomNoteIndex = GameScreen.getRandomNoteIndex();\n\n          this.playTheNote(notes[randomStringIndex][randomNoteIndex]);\n\n          return {\n            wrongGuesses: resetWrongGuesses,\n            rightGuessesArr: updatedrightGuessesArr,\n            randomStringIndex: randomStringIndex,\n            randomNoteIndex: randomNoteIndex\n          };\n        } else {\n          // Notify App.\n          onGameCompleted(updatedrightGuessesArr, state.totalWrongGuessesCount);\n          return {\n            rightGuessesArr: updatedrightGuessesArr\n          };\n        }\n      });\n    } else {\n      this.setState(state => {\n        const updatedWrongGuesses = [...state.wrongGuesses, octave[i]];\n        const updatedtotalWrongGuessesCount = state.totalWrongGuessesCount + 1;\n        return {\n          wrongGuesses: updatedWrongGuesses,\n          totalWrongGuessesCount: updatedtotalWrongGuessesCount\n        };\n      });\n    }\n  };\n\n  render() {\n    const allStrings = [];\n    const answerString = [];\n    const {\n      randomStringIndex,\n      randomNoteIndex,\n      wrongGuesses,\n      totalWrongGuessesCount,\n      rightGuess,\n      rightGuessesArr\n    } = this.state;\n\n    // Render guitar strings.\n    for (let i = 0; i < notes.length; i++) {\n      const stringToRender = [];\n      let stringButtonClasses = \"\";\n      for (let j = 0; j < notes[i].length; j++) {\n        // Highlight randomly picked note.\n        if (i === randomStringIndex && j === randomNoteIndex) {\n          // this.playTheNote(notes[i][j]);\n          stringButtonClasses = \"string-item is-highlighted\";\n          console.log(\"highlighted:\", notes[i][j]);\n        } else {\n          stringButtonClasses = \"string-item\";\n        }\n        stringToRender.push(\n          <li className={stringButtonClasses} key={`${i}-${j}`}>\n            <button>{notes[i][j]}</button>\n          </li>\n        );\n      }\n\n      allStrings.push(\n        <ul className=\"string\" key={i}>\n          {stringToRender}\n        </ul>\n      );\n    }\n\n    for (let i = 0; i < octave.length; i++) {\n      let buttonClasses = \"\";\n      const isWrongGuesses = wrongGuesses.includes(octave[i]);\n      const isRightGuess = rightGuess === octave[i];\n\n      if (isWrongGuesses) {\n        buttonClasses = \"is-wrong\";\n      } else if (isRightGuess) {\n        buttonClasses = \"is-correct\";\n      }\n\n      answerString.push(\n        <li key={i}>\n          <button\n            onClick={() => this.handleNoteClick(i)}\n            className={buttonClasses}\n          >\n            {octave[i]}\n          </button>\n        </li>\n      );\n    }\n\n    console.log(\"latest wrongGuesses:\", this.state.wrongGuesses);\n    console.log(\"total wrong guesses count:\", totalWrongGuessesCount);\n    console.log(\n      \"latest rightGuesses:\",\n      this.state.rightGuessesArr,\n      this.state.rightGuessesArr.length\n    );\n\n    return (\n      <div className=\"fretboard-inner\">\n        <div className=\"strings-wrapper\">\n          <div className=\"strings-wrapper--inner\">{allStrings}</div>\n        </div>\n        <div className=\"defined-notes-wrapper\">\n          <ul className=\"defined-notes\">{answerString}</ul>\n        </div>\n        <p>Question #{rightGuessesArr.length + 1}</p>\n      </div>\n    );\n  }\n}\n\nexport default GameScreen;\n","import React, { Component } from \"react\";\nimport StartScreen from \"./components/StartScreen\";\nimport ResultScreen from \"./components/ResultsScreen\";\nimport GameScreen from \"./components/GameScreen\";\nimport \"./App.css\";\n\nconst questionsCount = 5;\n\nclass App extends Component {\n  state = {\n    screen: 1,\n    totalWrongGuessesCount: null,\n    rightGuessesArr: []\n  };\n\n  handleStartGameClick = () => {\n    this.setState({\n      screen: 2\n    });\n  };\n\n  handleGameCompleted = (rightGuessesArrParam, totalWrongGuessesCountParam) => {\n    this.setState({\n      screen: 3,\n      rightGuessesArr: rightGuessesArrParam,\n      totalWrongGuessesCount: totalWrongGuessesCountParam\n    });\n  };\n\n  startGameHandler = () => {\n    this.setState({\n      screen: 2\n    });\n    this.assignNoteToGuess();\n  };\n\n  restartClickHandler = () => {\n    this.setState({\n      screen: 2\n    });\n  };\n\n  render() {\n    const { screen, totalWrongGuessesCount, rightGuessesArr } = this.state;\n\n    // Render screen.\n    if (screen === 1) {\n      return (\n        <div className=\"App\">\n          <StartScreen onStartGameClick={this.handleStartGameClick} />\n        </div>\n      );\n    }\n    if (screen === 2) {\n      return (\n        <div className=\"App\">\n          <GameScreen\n            questionsCount={questionsCount}\n            onGameCompleted={this.handleGameCompleted}\n          />\n        </div>\n      );\n    }\n    if (screen === 3) {\n      return (\n        <div className=\"App\">\n          <ResultScreen\n            onGameRestarted={this.restartClickHandler}\n            totalWrongGuessesCount={totalWrongGuessesCount}\n            rightGuessesArr={rightGuessesArr}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}